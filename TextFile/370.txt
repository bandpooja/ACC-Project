Hide popups when the user scrolls away with React | by Bianca Dragomir | Oct, 2021 | JavaScript in Plain English
Hide popups when the user scrolls away with React | by Bianca Dragomir | Oct, 2021 | JavaScript in Plain English Sign in Write For Us Archive plainenglish.io Hide popups when the user scrolls away with React Bianca Dragomir Follow Oct 17 · 4 min read How to write a custom hook that will ensure that sticky popups don’t ruin the UX in your React app. Photo by Paul Esch-Laurent on Unsplash First of all, the scenario that’s bugging us: Let’s say that in your app you have a popup that opens when you click on a user. In that popup, you display some basic info about that user. Other than this profile-preview popup, you might have some dropdown menus from where the user can edit or delete some items. The possibilities are endless, we use popups for many use cases in our apps. However, what happens when the user clicks away or starts to scroll while the popup is open? We want that popup to disappear — otherwise, they will end up with a ghost popup that just won’t go away from the viewport of the app (unless they specifically click on the X button of that popup. You added an X button, right?). Solving this involves 3 steps. We want to identify the element in which the scrolling happens (simply put, the ID of the element whose scrollbar is moving when you scroll on that page in your app). We want to add a listener to that element that will in turn call a function defined by us — in this function, we will, of course, anything that needs to be hidden. We want to also add a listener for the clicking away action — if the user clicks outside of the popup, it should close. Setting an action on the scroll event of the parent element In the following code snippet, I’ll show you how to implement the hook that will be called with the ID of the scrollable element, and the function that should be called any time the scroll event is detected. Of course, you can adapt this hook to listen to any other event that interests you. In the useEffect cleanup function we are removing the event listener so that its ghost won’t haunt us afterward. Now, let’s assume that the root component — the scrollable container, in our case — that’s at the root of our component tree looks something like this: So we are in turn interested in setting a listener on the element with the id INFINITE_SCROLL_ID any time a popup shows up on the screen. That popup must, of course, be able to close itself. Using the hook in the popup In the Popup component we will use the hook with what it needs: The handleScroll callback will be recreated when the isPopupOpen prop is detected as being true. The reason why we need to pass in the prop to the dependency array is that otherwise the callback wouldn’t be created correctly. It would be created with isPopupOpen set on false, despite having passed down a true value to this child component. Following the same logic, you can go back to the useOnScrollEffect hook and you’ll notice that the fun variable is also passed into the dependency array — this is because of the handleScroll callback changing so that it detects the correct value of the isPopupOpen prop. Why did we need to pass in these dependency arrays? From a purely ‘it works, leave it’ perspective, it would be fine without the dependency arrays. However, you’ll notice that without the if (props.isPopupOpen) check, the closePopup call would be made uselessly hundreds of times. You can verify this by passing in a console.log(“onscroll") in the body of handleScroll callback. I scrolled down 2 or 3 times and the log was fired over 400 times. Just imagine how we’d uselessly set a true value to true hundreds of times. Clicking outside of the popup For handling the ‘click away’ event, we are going to use a component from MaterialUI: ClickAwayListener. We will modify our popup so that its content is wrapped with this component. As a result, when any click is detected outside of our popup, it will be well-behaved and it will close by itself. We can also adjust the ClickAwayListener in such a way that it recognizes other events than simply clicking outside of the popup.There’s a mouseEffect prop on the component which accepts the following values, depending on what you need: ‘onClick’ ‘onMouseDown’ ‘onMouseUp’ However, for the current purpose, the default behavior is enough. You will notice that the popup is now closing the moment you start scrolling on the page or when you click outside of it. I hope that the article has helped you. We all want the UX in our apps to be as good as possible, so we need to also take care of such edge cases. Thanks a lot for reading! More content at plainenglish.io JavaScript in Plain English New JavaScript and Web Development content every day. Follow to join our +2M monthly readers. Follow 80 JavaScript React Programming Front End Development Web Development 80 claps 80 Written by Bianca Dragomir Follow Frontend dev & tech writer. https://www.patreon.com/biancadragomir Follow JavaScript in Plain English Follow New JavaScript and Web Development content every day. Follow to join our +2M monthly readers. Follow Written by Bianca Dragomir Follow Frontend dev & tech writer. https://www.patreon.com/biancadragomir JavaScript in Plain English Follow New JavaScript and Web Development content every day. Follow to join our +2M monthly readers. More From Medium A simple technique for real-time video Gaussian blurs that did seem to work. Joan Xie State of Web Assembly 2020 aesher9o1 in JavaScript in Plain English Convert create-react-app To create-single-spa app Dipika More IP Location : Angular + Ajax ipapi ~ ipapi.co Creating a Scratch Map using JavaScript & OpenLayers 5 Bernardo Belchior The Ghost in the Hashes Heather A in Medium Engineering Designing an Easy, Scalable State Management Solution for Large React Projects Frank Barros Ky’s (Somewhat Poignant) Guide to Asynchronicity and Cryptocurrencies?—?Part 3 Kyle Ledoux